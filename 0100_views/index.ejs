<!DOCTYPE html>
<html lang="ko">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>TZ todo</title>
  <link rel="stylesheet" href="/css/3000.css" />
  <script src="https://cdn.jsdelivr.net/npm/sortablejs@1.15.0/Sortable.min.js"></script>
  <style>
    * { box-sizing: border-box; }
    html, body {
      margin: 0;
      padding: 0;
      height: 100%;
      font-family: 'Segoe UI', sans-serif;
    }
    body.light-theme {
      background-color: #f2f2f2;
      color: #000;
    }
    body.dark-theme {
      background-color: #121212;
      color: #f0f0f0;
    }
    .container {
      display: flex;
      flex-direction: column;
      padding: 16px;
      min-height: 100vh;
      padding-bottom: 80px;
    }
    .top-buttons {
      display: grid;
      grid-template-columns: auto 1fr auto;
      gap: 8px;
      margin-bottom: 10px;
    }
    .top-buttons textarea {
      font-size: 1rem;
      padding: 0.6em 0.8em;
      border-radius: 6px;
      border: 1px solid #ccc;
      resize: vertical;
      width: 100%;
      min-height: 44px;
    }
    .top-buttons button {
      font-size: 1rem;
      border: none;
      border-radius: 6px;
      padding: 0.6em 0.8em;
      min-height: 44px;
    }
    #todoButtons {
      display: flex;
      gap: 8px;
    }
    .column {
      flex: 1;
      display: flex;
      flex-direction: column;
      gap: 8px;
    }
    .todo-btn {
      padding: 0.6em 0.8em;
      border-radius: 6px;
      border: 1px solid;
      line-height: 1.2;
      cursor: grab;
      white-space: pre-wrap;
    }
    .todo-btn.chosen,
    .todo-btn.dragging {
      background-color: #bbb !important;
    }
    #popupOverlay {
      position: fixed;
      top: 0; left: 0; right: 0; bottom: 0;
      background: rgba(0,0,0,0.3);
      display: none;
      align-items: center;
      justify-content: center;
      z-index: 2000;
    }
    #popup {
      background: white;
      padding: 20px;
      border-radius: 10px;
      min-width: 240px;
    }
    #popup button, #popup textarea {
      display: block;
      width: 100%;
      margin: 6px 0;
      padding: 10px;
    }
    #admob {
      position: fixed;
      bottom: 0;
      left: 0;
      width: 100%;
      height: 60px;
      text-align: center;
      line-height: 60px;
      font-size: 14px;
      z-index: 1000;
    }
    body.light-theme .container {
      background-color: #f2f2f2;
    }
    body.dark-theme .container {
      background-color: #121212;
    }
    body.light-theme .todo-btn {
      background-color: #fff;
      color: #333;
      border-color: #ccc;
    }
    body.dark-theme .todo-btn {
      background-color: #333;
      color: #fff;
      border-color: #666;
    }
    body.light-theme .top-buttons button {
      background-color: #ccc;
      color: #000;
    }
    body.dark-theme .top-buttons button {
      background-color: #444;
      color: white;
    }
    body.light-theme #admob {
      background-color: #000;
      color: white;
    }
    body.dark-theme #admob {
      background-color: #000;
      color: white;
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="top-buttons">
      <button id="settingsBtn" onclick="goToSettings()">‚öôÔ∏è ÏÑ§Ï†ï</button>
      <textarea id="newTodo" placeholder="ÏÉà Ìï† Ïùº ÏûÖÎ†•" rows="2"></textarea>
      <button onclick="addNewTodo()">‚ûï Ï∂îÍ∞Ä</button>
    </div>
    <div id="todoButtons"></div>
    <div id="popupOverlay"><div id="popup"></div></div>
    <div id="settingsPanel" class="hidden">
      <button onclick="clearTodos()">Î™®Îëê ÏÇ≠Ï†ú</button>
    </div>
  </div>
  <div id="admob">Í¥ëÍ≥† ÏûêÎ¶¨</div>

  <script>
    let isDragging = false;
    let dragStartTime = 0, dragStartX = 0, dragStartY = 0;

    function startTracking(e) {
      const point = e.touches ? e.touches[0] : e;
      dragStartTime = Date.now();
      dragStartX = point.clientX;
      dragStartY = point.clientY;
      isDragging = false;
    }

    function endTracking(e, text, colIndex, itemIndex) {
      const point = e.changedTouches ? e.changedTouches[0] : e;
      const elapsed = Date.now() - dragStartTime;
      const dist = Math.hypot(point.clientX - dragStartX, point.clientY - dragStartY);
      if (elapsed < 300 && dist < 5 && !isDragging) {
        showPopup(text, colIndex, itemIndex);
      }
    }

    function getColumns() {
      return parseInt(localStorage.getItem('columnCount')) || 1;
    }

    function getTodoColumns() {
      const stored = localStorage.getItem('todoColumns');
      if (stored) return JSON.parse(stored);
      const initial = [["ÏïàÎÖïÌïòÏÑ∏Ïöî", "ÎØ∏ÎûòÎ•º", "ÏùëÏõêÌï©ÎãàÎã§"]];
      localStorage.setItem("todoColumns", JSON.stringify(initial));
      return initial;
    }

    function setTodoColumns(columns) {
      localStorage.setItem('todoColumns', JSON.stringify(columns));
    }

    function addNewTodo() {
      const input = document.getElementById("newTodo");
      const value = input.value.trim();
      if (!value) return;
      const columns = getTodoColumns();
      columns[0].push(value);
      setTodoColumns(columns);
      input.value = "";
      renderTodos();
    }

    function clearTodos() {
      localStorage.removeItem("todoColumns");
      renderTodos();
    }

    function showPopup(text, colIndex, itemIndex) {
      const popup = document.getElementById("popup");
      const overlay = document.getElementById("popupOverlay");
      popup.innerHTML = `
        <div style="margin-bottom: 1em; white-space: pre-wrap;">${text}</div>
        <button onclick="startEdit(${colIndex}, ${itemIndex})">‚úèÔ∏è ÏàòÏ†ï</button>
        <button onclick="deleteTodo(${colIndex}, ${itemIndex})">üóë ÏÇ≠Ï†ú</button>
        <button onclick="closePopup()">‚ùå Ï∑®ÏÜå</button>
      `;
      overlay.style.display = 'flex';
    }

    function startEdit(colIndex, itemIndex) {
      const columns = getTodoColumns();
      const popup = document.getElementById("popup");
      const value = columns[colIndex][itemIndex];
      popup.innerHTML = `
        <textarea id="editTextarea" rows="3">${value}</textarea>
        <button onclick="saveEdit(${colIndex}, ${itemIndex})">ÌôïÏù∏</button>
        <button onclick="closePopup()">Ï∑®ÏÜå</button>
      `;
    }

    function saveEdit(colIndex, itemIndex) {
      const textarea = document.getElementById("editTextarea");
      const value = textarea.value.trim();
      if (!value) return;
      const columns = getTodoColumns();
      columns[colIndex][itemIndex] = value;
      setTodoColumns(columns);
      closePopup();
      renderTodos();
    }

    function closePopup() {
      document.getElementById("popupOverlay").style.display = 'none';
    }

    function deleteTodo(colIndex, itemIndex) {
      const columns = getTodoColumns();
      columns[colIndex].splice(itemIndex, 1);
      setTodoColumns(columns);
      closePopup();
      renderTodos();
    }

    function renderTodos() {
      const container = document.getElementById("todoButtons");
      const columns = getTodoColumns();
      const colCount = getColumns();

      const fontSize = parseInt(localStorage.getItem('fontSize')) || 3;
      const textAlign = localStorage.getItem('textAlign') || 'center';
      const remSize = 0.8 + fontSize * 0.2;

      while (columns.length < colCount) columns.push([]);
      while (columns.length > colCount) {
        const moved = columns.pop();
        columns[0].push(...moved);
      }

      setTodoColumns(columns);
      container.innerHTML = "";

      for (let i = 0; i < colCount; i++) {
        const colDiv = document.createElement("div");
        colDiv.className = "column";
        colDiv.dataset.index = i;

        columns[i].forEach((todo, j) => {
          const btn = document.createElement("button");
          btn.className = "todo-btn";
          btn.textContent = todo;

          btn.style.fontSize = remSize + "rem";     // ‚úÖ Í∏ÄÏûê ÌÅ¨Í∏∞ Ï†ÅÏö©
          btn.style.textAlign = textAlign;          // ‚úÖ Ï†ïÎ†¨ Ï†ÅÏö©

          btn.addEventListener('mousedown', startTracking);
          btn.addEventListener('mouseup', e => endTracking(e, todo, i, j));
          btn.addEventListener('touchstart', startTracking);
          btn.addEventListener('touchend', e => endTracking(e, todo, i, j));

          colDiv.appendChild(btn);
        });

        container.appendChild(colDiv);
      }

      Array.from(container.children).forEach((colDiv, i) => {
        Sortable.create(colDiv, {
          group: 'todo-columns',
          animation: 150,
          delay: 300,
          delayOnTouchOnly: true,
          ghostClass: 'dragging',
          chosenClass: 'chosen',
          onStart: () => isDragging = true,
          onEnd: () => {
            const newColumns = Array.from(container.children).map(col =>
              Array.from(col.querySelectorAll('.todo-btn')).map(btn => btn.textContent)
            );
            setTodoColumns(newColumns);
          }
        });
      });
    }

    function goToSettings() {
      window.location.href = '/setting';
    }

    function applySettings() {
      const theme = localStorage.getItem('theme') || 'light';
      document.body.classList.remove('light-theme', 'dark-theme');
      document.body.classList.add(theme + '-theme');
    }

    applySettings();
    renderTodos();
  </script>
</body>
</html>