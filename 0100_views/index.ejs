<!DOCTYPE html>
<html lang="ko">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>TZ todo</title>
  <link rel="stylesheet" href="/css/3000.css" />
  <script src="https://cdn.jsdelivr.net/npm/sortablejs@1.15.0/Sortable.min.js"></script>
  <style>
    * { box-sizing: border-box; }
    html, body {
      margin: 0;
      padding: 0;
      height: 100%;
      font-family: 'Segoe UI', sans-serif;
      position: relative;
    }
    body.dark-mode {
      background-color: #121212;
      color: #e0e0e0;
    }
    body.dark-mode textarea,
    body.dark-mode button,
    body.dark-mode .todo-btn,
    body.dark-mode #popup {
      background-color: #1e1e1e;
      color: #e0e0e0;
      border-color: #444;
    }
    body.dark-mode .todo-btn {
      border: 1px solid #555;
    }
    body.light-mode {
      background-color: #ffffff;
      color: #000000;
    }
    .container {
      padding: 16px;
      background-color: inherit;
    }
    .top-bar {
      display: grid;
      grid-template-columns: 1fr auto;
      gap: 8px;
      margin-bottom: 10px;
    }
    .top-bar textarea {
      font-size: 1rem;
      padding: 0.6em;
      border-radius: 6px;
      border: 1px solid #ccc;
      resize: vertical;
      min-height: 44px;
    }
    .top-bar button {
      font-size: 1rem;
      padding: 0.6em 1em;
      border: none;
      border-radius: 6px;
      cursor: pointer;
    }
    .add-row {
      display: flex;
      gap: 8px;
      margin-bottom: 10px;
    }
    .add-row button {
      flex: 1;
      font-size: 1rem;
      height: 48px;
      line-height: 48px;
      text-align: center;
      border: none;
      border-radius: 6px;
      display: flex;
      align-items: center;
      justify-content: center;
      background-color: #ccc;
      color: #000;
    }
    body.dark-mode .add-row button {
      background-color: #333;
      color: #fff;
    }
    #columns {
      display: flex;
      gap: 8px;
    }
    .column {
      flex: 1;
      display: flex;
      flex-direction: column;
      gap: 8px;
    }
    .todo-btn {
      border-radius: 6px;
      border: 1px solid;
      white-space: pre-wrap;
      cursor: grab;
      display: flex;
      align-items: center;
      justify-content: center;
      overflow: hidden;
      text-align: center;
      touch-action: none;
      user-select: none;
    }
    .dragging {
      background-color: #888 !important;
      opacity: 0.5;
      transform: scale(0.95);
    }
    #popupOverlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.5);
      display: none;
      align-items: center;
      justify-content: center;
      overflow: auto;
      z-index: 9999;
    }
    #popup {
      background: white;
      padding: 16px;
      border-radius: 10px;
      min-width: 200px;
    }
    #popup button {
      display: block;
      width: 100%;
      margin: 6px 0;
      padding: 10px;
      border-radius: 6px;
      border: none;
    }
    #admob-placeholder {
      position: fixed;
      bottom: 0;
      left: 0;
      width: 100%;
      height: 60px;
      background-color: #000;
      color: white;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 14px;
      z-index: 10;
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="top-bar">
      <textarea id="todoInput" placeholder="Ìï† ÏùºÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî"></textarea>
      <button onclick="goToSettings()">‚öôÔ∏è ÏÑ§Ï†ï</button>
    </div>
    <div id="addRow" class="add-row"></div>
    <div id="columns"></div>
  </div>
  <div id="popupOverlay"><div id="popup"></div></div>
  <div id="admob-placeholder">Í¥ëÍ≥† ÏòÅÏó≠</div>

  <script>
    let popupOpen = false;

    function goToSettings() {
      location.href = '/setting';
    }

    function getColumnCount() {
      return parseInt(localStorage.getItem('columnCount') || '1');
    }

    function getTodos() {
      return JSON.parse(localStorage.getItem('todoColumns') || '[]');
    }

    function setTodos(data) {
      localStorage.setItem('todoColumns', JSON.stringify(data));
    }

    function getSettings() {
      return {
        fontSize: parseInt(localStorage.getItem('fontSize') || '3'),
        textAlign: localStorage.getItem('textAlign') || 'center',
        buttonSize: parseInt(localStorage.getItem('buttonSize') || '3'),
        theme: localStorage.getItem('theme') || 'light',
      };
    }

    function applyTheme(theme) {
      document.body.classList.remove('light-mode', 'dark-mode');
      document.body.classList.add(theme === 'dark' ? 'dark-mode' : 'light-mode');
    }

    function showPopup(colIndex, itemIndex, text) {
      popupOpen = true;
      const popup = document.getElementById('popup');
      const overlay = document.getElementById('popupOverlay');
      popup.innerHTML = `
        <div style="margin-bottom: 1em; white-space: pre-wrap;">${text}</div>
        <button onclick="editItem(${colIndex}, ${itemIndex})">‚úèÔ∏è ÏàòÏ†ï</button>
        <button onclick="deleteItem(${colIndex}, ${itemIndex})">üóë ÏÇ≠Ï†ú</button>
        <button onclick="closePopup()">‚ùå Ï∑®ÏÜå</button>
      `;
      overlay.style.display = 'flex';
    }

    function closePopup() {
      popupOpen = false;
      document.getElementById('popupOverlay').style.display = 'none';
    }

    function editItem(colIndex, itemIndex) {
      const todos = getTodos();
      const popup = document.getElementById('popup');
      const original = todos[colIndex][itemIndex];
      popup.innerHTML = `
        <textarea id="editInput" rows="3">${original}</textarea>
        <button onclick="confirmEdit(${colIndex}, ${itemIndex})">ÌôïÏù∏</button>
        <button onclick="closePopup()">Ï∑®ÏÜå</button>
      `;
    }

    function confirmEdit(colIndex, itemIndex) {
      const value = document.getElementById('editInput').value.trim();
      const todos = getTodos();
      todos[colIndex][itemIndex] = value;
      setTodos(todos);
      closePopup();
      render();
    }

    function deleteItem(colIndex, itemIndex) {
      const todos = getTodos();
      todos[colIndex].splice(itemIndex, 1);
      setTodos(todos);
      closePopup();
      render();
    }

    function addTodo(colIndex) {
      const value = document.getElementById('todoInput').value.trim();
      let todos = getTodos();
      todos[colIndex].push(value);
      setTodos(todos);
      document.getElementById('todoInput').value = '';
      render();
    }

    function initSortable() {
      const columnsEl = document.getElementById('columns');
      for (const col of columnsEl.children) {
        Sortable.create(col, {
          group: 'shared',
          animation: 150,
          ghostClass: 'dragging',
          fallbackOnBody: true,
          forceFallback: true,
          delay: 150,
          delayOnTouchOnly: true,
          touchStartThreshold: 5,
          onStart: () => popupOpen = false,
          onAdd: function (evt) {
            const from = evt.from.dataset.index;
            const to = evt.to.dataset.index;
            const movedItem = evt.item.textContent;
            let todos = getTodos();
            const index = todos[from].indexOf(movedItem);
            if (index > -1) todos[from].splice(index, 1);
            todos[to].splice(evt.newIndex, 0, movedItem);
            setTodos(todos);
          },
          onUpdate: function () {
            let newData = [];
            for (const col of columnsEl.children) {
              const items = Array.from(col.children).map(x => x.textContent);
              newData.push(items);
            }
            setTodos(newData);
          }
        });
      }
    }

    function render() {
      const colCount = getColumnCount();
      const settings = getSettings();
      applyTheme(settings.theme);

      let data = getTodos();
      while (data.length < colCount) data.push([]);
      setTodos(data);

      const columnsEl = document.getElementById('columns');
      const addRowEl = document.getElementById('addRow');
      columnsEl.innerHTML = '';
      addRowEl.innerHTML = '';

      const fontSizeRem = 0.8 + settings.fontSize * 0.2;
      const buttonHeight = settings.buttonSize * 12 + 28 + 'px';

      for (let i = 0; i < colCount; i++) {
        const btn = document.createElement('button');
        btn.textContent = '+Ï∂îÍ∞Ä';
        btn.onclick = () => addTodo(i);
        addRowEl.appendChild(btn);

        const col = document.createElement('div');
        col.className = 'column';
        col.dataset.index = i;

        data[i].forEach((todo, j) => {
          const el = document.createElement('div');
          el.className = 'todo-btn';
          el.textContent = todo;
          el.style.fontSize = fontSizeRem + 'rem';
          el.style.height = buttonHeight;
          el.style.textAlign = settings.textAlign;

          el.onclick = (e) => {
            if (!popupOpen) {
              e.stopPropagation();
              showPopup(i, j, todo);
            }
          };
          col.appendChild(el);
        });

        columnsEl.appendChild(col);
      }

      initSortable();
    }

    if (!localStorage.getItem('todoColumns')) {
      localStorage.setItem('todoColumns', JSON.stringify([['ÏïàÎÖïÌïòÏÑ∏Ïöî']]));
    }
    if (!localStorage.getItem('columnCount')) {
      localStorage.setItem('columnCount', '1');
    }

    window.addEventListener('focus', render);
    render();
  </script>
</body>
</html>
